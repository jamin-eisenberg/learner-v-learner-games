/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void gameTextChange(GTextArea source, GEvent event) { //_CODE_:gameText:763000:
  println("gameText - GTextArea >> GEvent." + event + " @ " + millis());
} //_CODE_:gameText:763000:

public void recencySliderChange(GSlider source, GEvent event) { //_CODE_:recencySlider:337396:
  println("slider1 - GSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:recencySlider:337396:

public void errorSliderChange(GSlider source, GEvent event) { //_CODE_:errorSlider:951737:
  println("errorSlider - GSlider >> GEvent." + event + " @ " + millis());
} //_CODE_:errorSlider:951737:

public void runGameEvent(GButton source, GEvent event) { //_CODE_:runGameButton:961154:
  println("button1 - GButton >> GEvent." + event + " @ " + millis());
  try{
    currStrat = 0;
    makeLearners();
    run();
    setFinalResultsText();
    setMatrixRepText();
    xMaxLabel.setText(gamesPerSimText.getText());
    graphing = true;
    inputErrorLabel.setText("");
  }
  catch(Exception e){
    e.printStackTrace();
    inputErrorLabel.setText("INPUT ERROR. PLEASE FIX AND TRY AGAIN.");
  }
} //_CODE_:runGameButton:961154:

public void p2WeightsTextChange(GTextField source, GEvent event) { //_CODE_:p2WeightsText:447035:
  println("p2WeightsText - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:p2WeightsText:447035:

public void nextLineButtonClick(GButton source, GEvent event) { //_CODE_:nextLineButton:728716:
  println("nextLineButton - GButton >> GEvent." + event + " @ " + millis());
  if(currStrat < l1.getCurrWeights().length + l2.getCurrWeights().length - 1) currStrat++;
} //_CODE_:nextLineButton:728716:

public void prevLineButtonClick(GButton source, GEvent event) { //_CODE_:prevLineButton:470163:
  println("prevLineButton - GButton >> GEvent." + event + " @ " + millis());
  if(currStrat > 0) currStrat--;
} //_CODE_:prevLineButton:470163:

public void p1WeightsTextChange(GTextField source, GEvent event) { //_CODE_:p1WeightsText:557522:
  println("p1WeightsText - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:p1WeightsText:557522:

public void gamesPerSimChange(GTextField source, GEvent event) { //_CODE_:gamesPerSimText:338762:
  println("textfield1 - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:gamesPerSimText:338762:

public void numSimsChange(GTextField source, GEvent event) { //_CODE_:numSimsText:252101:
  println("textfield2 - GTextField >> GEvent." + event + " @ " + millis());
} //_CODE_:numSimsText:252101:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Learner vs Learner Game Simulation");
  gameLabel = new GLabel(this, 0, 0, 260, 120);
  gameLabel.setTextAlign(GAlign.LEFT, GAlign.TOP);
  gameLabel.setText("Enter the game matrix below, with space separated values, and commas between player payoffs if asymmetric (integers >= 0):");
  gameLabel.setOpaque(false);
  gameText = new GTextArea(this, 0, 120, 260, 210, G4P.SCROLLBARS_BOTH | G4P.SCROLLBARS_AUTOHIDE);
  gameText.setPromptText("0,1 3,3 6,4 3,2\n1,2 4,4 1,1 2,1\n0,0 3,6 5,2 1,1");
  gameText.setOpaque(true);
  gameText.addEventHandler(this, "gameTextChange");
  recencyLabel = new GLabel(this, 260, 0, 130, 30);
  recencyLabel.setTextAlign(GAlign.CENTER, GAlign.CENTER);
  recencyLabel.setText("Recency Index:");
  recencyLabel.setOpaque(false);
  recencySlider = new GSlider(this, 270, 30, 100, 60, 10.0);
  recencySlider.setShowValue(true);
  recencySlider.setLimits(0.95, 0.5, 1.0);
  recencySlider.setNumberFormat(G4P.DECIMAL, 2);
  recencySlider.setOpaque(false);
  recencySlider.addEventHandler(this, "recencySliderChange");
  errorLabel = new GLabel(this, 390, 0, 100, 30);
  errorLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  errorLabel.setText("Error Rate:");
  errorLabel.setOpaque(false);
  errorSlider = new GSlider(this, 390, 30, 100, 60, 10.0);
  errorSlider.setShowValue(true);
  errorSlider.setLimits(0.05, 0.0, 0.5);
  errorSlider.setNumberFormat(G4P.DECIMAL, 2);
  errorSlider.setOpaque(false);
  errorSlider.addEventHandler(this, "errorSliderChange");
  weightLabel = new GLabel(this, 260, 90, 230, 160);
  weightLabel.setTextAlign(GAlign.LEFT, GAlign.TOP);
  weightLabel.setText("Enter space separated weights that should initially be gven to each strategy, in the same order, integers >= 0. If applicable, write player two's weights in the second box:");
  weightLabel.setOpaque(false);
  runGameButton = new GButton(this, 0, 330, 650, 30);
  runGameButton.setText("RUN GAME");
  runGameButton.setTextBold();
  runGameButton.setTextItalic();
  runGameButton.setLocalColorScheme(GCScheme.RED_SCHEME);
  runGameButton.addEventHandler(this, "runGameEvent");
  p2WeightsText = new GTextField(this, 260, 290, 230, 40, G4P.SCROLLBARS_HORIZONTAL_ONLY | G4P.SCROLLBARS_AUTOHIDE);
  p2WeightsText.setPromptText("20 4 5 10");
  p2WeightsText.setOpaque(true);
  p2WeightsText.addEventHandler(this, "p2WeightsTextChange");
  gamesPerLearnerLabel = new GLabel(this, 510, 0, 140, 60);
  gamesPerLearnerLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  gamesPerLearnerLabel.setText("Games per simulation:");
  gamesPerLearnerLabel.setOpaque(false);
  learnersPerBatchLabel = new GLabel(this, 510, 100, 140, 60);
  learnersPerBatchLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  learnersPerBatchLabel.setText("# of simulations:");
  learnersPerBatchLabel.setOpaque(false);
  yMaxLabel = new GLabel(this, 0, 430, 20, 20);
  yMaxLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  yMaxLabel.setText("1");
  yMaxLabel.setOpaque(false);
  yMinLabel = new GLabel(this, 0, 770, 20, 20);
  yMinLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  yMinLabel.setText("0");
  yMinLabel.setOpaque(false);
  xMinLabel = new GLabel(this, 20, 790, 20, 20);
  xMinLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  xMinLabel.setText("0");
  xMinLabel.setOpaque(false);
  xMaxLabel = new GLabel(this, 590, 790, 80, 20);
  xMaxLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  xMaxLabel.setText("0");
  xMaxLabel.setOpaque(false);
  nextLineButton = new GButton(this, 340, 380, 310, 30);
  nextLineButton.setText("NEXT STRATEGY");
  nextLineButton.setTextBold();
  nextLineButton.setTextItalic();
  nextLineButton.addEventHandler(this, "nextLineButtonClick");
  inputErrorLabel = new GLabel(this, 490, 200, 160, 130);
  inputErrorLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  inputErrorLabel.setLocalColorScheme(GCScheme.RED_SCHEME);
  inputErrorLabel.setOpaque(false);
  strategyLabel = new GLabel(this, 560, 410, 90, 60);
  strategyLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  strategyLabel.setText("Player 0 Strategy 0");
  strategyLabel.setOpaque(false);
  prevLineButton = new GButton(this, 0, 380, 310, 30);
  prevLineButton.setText("PREVIOUS STRATEGY");
  prevLineButton.setTextBold();
  prevLineButton.setTextItalic();
  prevLineButton.addEventHandler(this, "prevLineButtonClick");
  yLabel = new GLabel(this, 0, 480, 20, 230);
  yLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  yLabel.setText("P  R  O  B  A  B  I  L  I  T  Y");
  yLabel.setTextItalic();
  yLabel.setOpaque(false);
  xLabel = new GLabel(this, 190, 790, 240, 20);
  xLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  xLabel.setText("GAME #");
  xLabel.setTextItalic();
  xLabel.setOpaque(false);
  p1WeightsText = new GTextField(this, 260, 250, 230, 40, G4P.SCROLLBARS_HORIZONTAL_ONLY | G4P.SCROLLBARS_AUTOHIDE);
  p1WeightsText.setPromptText("3 6 4");
  p1WeightsText.setOpaque(true);
  p1WeightsText.addEventHandler(this, "p1WeightsTextChange");
  finalResultLabel = new GLabel(this, 670, 10, 260, 350);
  finalResultLabel.setTextAlign(GAlign.LEFT, GAlign.TOP);
  finalResultLabel.setOpaque(false);
  gamesPerSimText = new GTextField(this, 510, 60, 140, 40, G4P.SCROLLBARS_HORIZONTAL_ONLY | G4P.SCROLLBARS_AUTOHIDE);
  gamesPerSimText.setOpaque(true);
  gamesPerSimText.addEventHandler(this, "gamesPerSimChange");
  numSimsText = new GTextField(this, 510, 160, 140, 40, G4P.SCROLLBARS_HORIZONTAL_ONLY | G4P.SCROLLBARS_AUTOHIDE);
  numSimsText.setOpaque(true);
  numSimsText.addEventHandler(this, "numSimsChange");
  matrixRepLabel = new GLabel(this, 670, 380, 260, 410);
  matrixRepLabel.setTextAlign(GAlign.LEFT, GAlign.TOP);
  matrixRepLabel.setOpaque(false);
  label1 = new GLabel(this, 670, 790, 260, 20);
  label1.setTextAlign(GAlign.RIGHT, GAlign.MIDDLE);
  label1.setText("Created by Jamin Eisenberg");
  label1.setOpaque(false);
}

// Variable declarations 
// autogenerated do not edit
GLabel gameLabel; 
GTextArea gameText; 
GLabel recencyLabel; 
GSlider recencySlider; 
GLabel errorLabel; 
GSlider errorSlider; 
GLabel weightLabel; 
GButton runGameButton; 
GTextField p2WeightsText; 
GLabel gamesPerLearnerLabel; 
GLabel learnersPerBatchLabel; 
GLabel yMaxLabel; 
GLabel yMinLabel; 
GLabel xMinLabel; 
GLabel xMaxLabel; 
GButton nextLineButton; 
GLabel inputErrorLabel; 
GLabel strategyLabel; 
GButton prevLineButton; 
GLabel yLabel; 
GLabel xLabel; 
GTextField p1WeightsText; 
GLabel finalResultLabel; 
GTextField gamesPerSimText; 
GTextField numSimsText; 
GLabel matrixRepLabel; 
GLabel label1; 
